//webpack.config.js 정리
* SourceMap이란?
- 배포용으로 빌드한 파일과 원본 파일을 서로 연결시켜주는 기능 

1. SourceMap이 필요한 이유?
보통 페이지를 표기하기 위한 JS, CSS 등은 webpack과 같은 도구를 이용해 번들링 되어 난독화되고 압축된다.
보다 서버에 빠르게 전달되고 보안성을 높이기 위해 이러한 난독화와 압축이 사용되는데 이럴경우 페이지에서 에러가 발생할 시 디버깅하기 힘들어짐.
브라우저의 디버깅 툴은 난독화된 코드에서 에러를 가리키기 때문에 개발자로서는 난독화된 코드의 에러 발생 부분이 어느 지점인지 알 수가 없음.
그래서 SourceMap이 필요한 것이다.
SourceMap은 원본코드를 특정한 알고리즘으로 인코딩하여 특정 키워드로 맵핑을 시켜두면 나중에 브라우저에서 난독화된 코드를 그대로 디코딩하여 복원할 수 있기 때문이다.

SourceMap 스펙
{
    "version" : 3, //양수로 SourceMap의 버전을 의미하고, 항상 가장 맨 앞에 위치 해야함
    "file": "out.js", //변환된 파일명
    "sourceRoot": "", //옵션값, 소스 파일을 가져올 경로의 루트를 재조정하는데 사용
    "sources": ["foo.js", "bar.js"], //mappings에서 사용할 원본 소스 파일명의 배열
    "sourcesContent": [null, null], 옵션값, 원본 소스코드의 내용
    "names": ["src", "maps", "are", "fun"], //mappings에서 사용할 심볼의 이름(소스파일에서 사용되는 변수 및 함수 이름들)
    "mappings": "A,AAAB;;ABCDE;" //인코딩된 매핑 데이터의 문자열, 이 문자열은 인코딩 되어서 복잡해보이지만 꽤 많은 정보를 담고 있다.
    //변환된 코드의 몇 번째 글자인지
    //원본 코드가 등장하는 파일이 무엇인지
    //원본 코드의 몇 번째 라인인지
    //원본 코드의 몇 번째 글자인지
    //만약, 메서드, 파라미터처럼 이름이 식별되어 있다면 원래 이름은 무엇인지
}


